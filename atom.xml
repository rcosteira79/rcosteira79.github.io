<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Articles</title>
    <description>A mobile software engineer with a passion for Android and clean, maintainable code. I build apps from the ground up and maintain existing ones. Currently out of my area of expertise in order to diversify my skills on software design and architecture.</description>
    <link>
    </link>
    
      
      <item>
        <title>How not to use sealed classes and LiveData for state management</title>
        
          <description>&lt;p&gt;A few months ago, I was washing my dishes while listening to &lt;a href=&quot;https://fragmentedpodcast.com/episodes/148/&quot;&gt;episode 148 of the Fragmented podcast&lt;/a&gt;. In this episode, Donn Felker and Kaushik Gopal talk about architecture. To be specific, about an MVI-like architecture that Kaushik has been using.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 28 May 2019 11:00:00 +0100</pubDate>
        <link>
        /how-not-to-use-sealed-classes-and-livedata-for-state-management</link>
        <guid isPermaLink="true">/how-not-to-use-sealed-classes-and-livedata-for-state-management</guid>
      </item>
      
    
      
      <item>
        <title>Encapsulate and abstract for future proof software</title>
        
          <description>&lt;p&gt;Change will always affect your software. No matter the domain, the uses cases, the developers, or even the users. Change is the one constant in software development.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 22 Apr 2019 11:00:00 +0100</pubDate>
        <link>
        /encapsulate-and-abstract-for-future-proof-software</link>
        <guid isPermaLink="true">/encapsulate-and-abstract-for-future-proof-software</guid>
      </item>
      
    
  </channel>
</rss>
